#lang sicp

(define (fib n)
  (cond ((= n 0) 0)
        ((= n 1) 1)
        (else (+ (fib (- n 1)
                      (- n 2))))))

(define (fib-iter n)
  (define (fib-in a b count)
    (if (= count 0)
        b
        (fib-in (+ a b) a (- count 1))))
  (fib-in 1 0 n))

(define (count-change amount) (cc amount 5))

(define (cc amount kinds-of-coins)
    (cond ((= amount 0) 1)
          ((or (< amount 0) (= kinds-of-coins 0)) 0)
          (else (+ (cc amount (- kinds-of-coins 1))
                   (cc (- amount
                          (first-denomination)) kinds-of-coins)))))

(define (first-denomination kinds-of-coins)
      (cond ((= kinds-of-coins 1) 1)
            ((= kinds-of-coins 2) 5)
            ((= kinds-of-coins 3) 10)
            ((= kinds-of-coins 4) 25)
            ((= kinds-of-coins 5) 50)))


(define (f n)
  (if (< n 3)
      n
      (+ (f (- n 1)) (f (- n 2)) (f (- n 3)))))

(define (f-iter n)
  (define (f-inner a b c count)
    (if (= count 0)
        c
        (f-inner (+ a b c) a b (- count 1))))
  (f-inner 2 1 0 n))