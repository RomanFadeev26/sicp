#lang sicp

(define (cube n) (* n n n))

(define (sum-integers a b)
  (if (> a b)
      0
      (+ a (sum-integers (+ a 1) b))))

(define (sum-cubes a b)
  (if (> a b)
      0
      (+ (cube a) (sum-cubes (+ a 1) b))))



;;(define (pi-sum a b)
;;  (if (> a b)
;;     0
;;     (+ (/ 1.0 (* a (+ a 2))) (pi-sum (+ a 4) b))))

;;(define (sum term a next b)
;;  (if (> a b)
;;      0
;;      (+ (term a) (sum term (next a) next b))))

(define (sum term a next b)
  (define (iter a result)
    (if (> a b)
        result
        (iter (next a) (+ (term a) result))))
  (iter a 0))

(define (inc a) (+ a 1))

(define (sum-cubes2 a b) (sum cube a inc b))

(define (identity x) x)

;(define (sum-integers2 a b) (sum identity a inc b))

;(define (sum-integers3 a b) (sum2 identity a inc b))

;;(define (pi-sum2 a b)
;;  (define (pi-term x) (/ 1.0 (* x (+ x 2))))
;;  (define (pi-next x) (+ x 4))
;;  (sum pi-term a pi-next b))

;(define (integral f a b dx)
;  (define (add-dx x) (+ x dx))
;  (* (sum f (+ a (/ dx 2)) add-dx b) dx))

(define (product term a next b)
  (define (iter a result)
    (if (> a b)
        result
        (iter (next a) (* (term a) result))))
  (iter a 1))

(define (factorial a) (product identity 1 inc a))

(define (accumulate combiner null-value term a next b)
  (define (iter a result)
    (if (> a b)
        result
        (iter (next a) (combiner (term a) result))))
  (iter a null-value))


(define (pi-sum a b)
  (sum (lambda (x) (/ 1.0 (* x (+ x 2)))) a (lambda (x) (+ x 4))))

(define (integral f a b dx)
  (* (sum f (+ a (/ dx 2.0)) (lambda (x) (+ x dx)) b)
     dx))

(define (square x) (* x x))

(define (f x y)
  (let ((a (+ 1 (* x y)))
       (b (- 1 y)))
  (+ (* x (square a))
     (* y b)
     (* a b))))

(define (average x y) (/ (+ x y) 2))

;(define (positive? x) (> x 0))

;(define (negative? x) (< x 0))

(define (close-enough? x y)
  (< (abs (- x y)) 0.001))

(define (search f neg-point pos-point)
  (let ((mid-point (average neg-point pos-point)))
        (if (close-enough? neg-point pos-point)
            mid-point
            (let ((test-value (f mid-point)))
                  (cond ((positive? test-value) (search f neg-point mid-point))
                        ((negative? test-value) (search f mid-point pos-point))
                        (else mid-point))))))

(define (half-interval-method f a b)
  (let ((a-value (f a))
        (b-value (f b)))
    (cond ((and (negative? a-value) (positive? b-value)) (search f a b))
          ((and (positive? a-value) (negative? b-value)) (search f b a))
          (else
           (error "У аргументов не разные знаки" a b)))))

