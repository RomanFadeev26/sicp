#lang sicp

(define a 3)
(define b (+ a 1))

(+ a b (* a b))

(if (and (> b a) (< b (* a b)))
    b
    a)

(cond ((= a 4) 6)
      ((= b 4) (+ 6 7 a))
      (else 25))

(+ 2 (if (> b a) b a))

(* (cond ((> a b) a)
         ((< a b) b)
         (else -1))
   (+ a 1))

(/ (+ 5 4 (+ (- 2 3 6) (/ 4 5))) (* 3 (- 6 2) (- 2 7)))

(define (square x) (* x x))
(define (sum-of-squares x y) ( + (square x) (square y)))

(define (big-squares a b c) (cond ((and (> a b) (> c b)) (sum-of-squares a c))
                                  ((and (> b a) (> c a)) (sum-of-squares b c))
                                  (else (sum-of-squares a b))))